Instru√ß√µes
O projeto 1, ir√° utilizar o Vite como a base funcional do c√≥digo.
Use este comando para instalar o Vite no seu projeto, tendo o Nodejs instalado na m√°quina.
npm create vite @latest

Para instalar as depend√™ncias, use:
npm i



                    Componentes
                Import e export 
o Import serve para reaproveitar um c√≥digo j√° existe utilizando chaves ao redor dele.
  Ex:
import { Posted } from './pastadobutton';
import { Post } from './src/Post'


O export function serve para enviar o c√≥digo para o Import, assim ele consegue reaproveitar.
  Ex:
export function App() {
  return (
    <div>
      <Posted />
      <Posted />
      <Posted />
      <Posted />
    </div>
  )
}

Em c√≥digo completo fica assim:
import { Posted } from './Post';

export function App() {
  return (
    <div>
      <Posted />
      <Posted />
      <Posted />
      <Posted />
    </div>
  )
}


COMPONENTES
Propiedades
props
S√£o componentes para reaproveitar html, estiliza√ß√£o, funcionamento em JavaScrip.
Podendo ter diferiencia√ß√£o de cada exibi√ß√£o atraves das propiedades(props).
  Ex:

          Arquivo App.jsx
import { Post } from './Post';

export function App() {
  return (
    <div>
      <Post
        author="Matheus"
        content="Vou fazer 19 anos"
      />

      <Post
        author="Gustavo"
        content="Vai fazer 12 anos"
      />
    </div>
  )
}

          Arquivo Post
export function Post(props) {

  return (
    <div>
      <strong>{props.author}</strong>
      <p>{props.content}</p>
    </div>
  )
} 

          Para a cria√ß√£o de informa√ßoes variaveis, usamos as props.

const posts = [
  {
    id: 1,
    author: {
      avatarUrl: "https://github.com/Rodriguesw.png",
      name: 'Matheus Henrique',
      role: "Estagi√°rio"
    },
    content: [
      { type: 'paragraph', content: "Fala galeraa üëã" },
      { type: 'paragraph', content: "Acabei de subir mais um projeto no meu portifa. √â um projeto que fiz no NLW Return, evento da Rocketseat. O nome do projeto √© DoctorCare üöÄ" },
      { type: 'link', content: "jane.design/doctorcare" },
    ],
    publishedAt: new Date('2023-01-25 16:17:15'),
  }
]

para que podessemos utilizar dessa forma. 
<header>
    <div className={styles.author}>
        <Avatar src={author.avatarUrl}/>
        <div className={styles.authorInfo}>
            <strong>{author.name}</strong>
            <span>{author.role}</span>
        </div>
    </div>

    <time title="24 de janeiro √†s 14:40h" datatime="2023-01-24 14:40:19">
        {publishedDateformatted}
        </time>
</header>


Podemos trabalhar com datas, utilizando esse c√≥digo.

const publishedDateformatted = new Intl.DateTimeFormat('pt-BR', {
  day: '2-digit',
  month: 'long',
  hour: '2-digit',
  minute: '2-digit'
}).format(publishedAt);

Utilizando com base no c√≥digo do const posts.

publishedAt: new Date('2023-01-25 16:17:15') 

                            Trabalhando com Datas com date-fns
Instale o date-fns no terminal.
npm i date-fns

Feito isso, √© preciso importar.
import {format} from 'date-fns';

Depois disso use o seguinte c√≥digo para a formata√ß√£o:
const publishedDateformatted = format(publishedAt, "d 'de' LLLL '√†s' HH:mm'h'")

E depois jogue na tag time:
<time title="24 de janeiro √†s 14:40h" datatime="2023-01-24 14:40:19">
  {publishedDateformatted}
  </time>

N√£o se esque√ßa que o "publishedAt" ser√° pego no "posts" que fica em "App.jsx".

                      Agora resta deixar em Portugu√™s
Use:
import ptBR from 'date-fns/locale/pt-BR';

E no terceiro par√¢metro coloque em formato de objeto.
{
  locale: ptBR,
}

C√≥digo final, fica assim:
const publishedDateformatted = format(publishedAt, "d 'de' LLLL '√†s' HH:mm'h'", {
  locale: ptBR,
})


Coloque o "publishedDateformatted" no title da tag time (<time></time>)

C√≥digo do arquivo Post.jsx.
<time title={publishedDateformatted} datatime="2023-01-24 14:40:19">             
</time>

                          Comparando a data da publica√ß√£o com a data atual.
Importando o formatDistanceToNow no date-fns
import {format, formatDistanceToNow } from 'date-fns';

Realize o seguinte c√≥digo.
const publishedDateRelativeToNow = formatDistanceToNow(publishedAt, {
  locale: ptBR,
  addSuffix: true        //Isso ir√° adicionar um prefixo antes do hor√°rio, exemplo: "h√° 2 dias"
})

Feito isso adicione na tag time.
<time title={publishedDateformatted} datatime={publishedAt.toISOString()}>
  {publishedDateRelativeToNow}
  </time>











